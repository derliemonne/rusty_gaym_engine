var searchIndex = JSON.parse('{\
"rusty_gaym_engine":{"doc":"","t":[0,0,0,0,0,0,3,8,3,10,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,10,11,11,11,11,11,11,3,3,12,11,11,11,11,12,11,12,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["components","ecs","engine","geometry","matrix","vector","CameraComponent","Component","TransformComponent","as_any","as_any","as_any","borrow","borrow","borrow_mut","borrow_mut","draw_distance","fmt","fmt","fov","from","from","identity3d","into","into","look_at3d","position","rotate3d","rotation","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Components","Entity","Game","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","collect","collect_dyn","components","components","coordinate_system","create_entity","default","entities","eq","from","from","from","hash","id","into","into","into","new","new","start_loop","systems","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with","Body","Sphere","borrow","borrow_mut","contains","from","into","try_from","try_into","type_id","vzip","CoordinateSystem","Ray","base","borrow","borrow","borrow_mut","borrow_mut","coordinate_system","default3","direction","eq","from","from","initial_point","into","into","point","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Matrix","add","adjoint_matrix","approximately_equal","borrow","borrow_mut","clone","clone_into","cols_count","determinant","div","empty","eq","fmt","from","from_col","from_cols","from_row","from_rows","from_rule","get","get_col","get_minor","get_row","gram_matrix","identity","index","index_mut","into","inverse","mul","mul","mul","mul","mul","multiply","multiply_by_vector","new","rotation_matrix2d","rotation_matrix3d","rows_count","set","set_col","set_row","sub","swap_cols","swap_rows","to_owned","transposed","try_from","try_into","type_id","vzip","zeroes","Vector","add","approximately_equal","borrow","borrow_mut","clone","clone_into","coordinates","cross_product","dim","distance","div","dot_product","eq","fmt","from","from_xyz","get","index","index_mut","into","magnitude","mul","mul_assign","neg","new","one3","rotate2d","rotate3d","set","square_distance","square_magnitude","sub","to_owned","try_from","try_into","type_id","vzip","zero3"],"q":["rusty_gaym_engine","","","","","","rusty_gaym_engine::components","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_gaym_engine::ecs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_gaym_engine::engine","","","","","","","","","","","rusty_gaym_engine::geometry","","","","","","","","","","","","","","","","","","","","","","","","","rusty_gaym_engine::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_gaym_engine::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns determinant of a square matrix. If matrix is …","","Returns matrix with zero columns and zero rows.","","","Returns the argument unchanged.","Returns matrix made of one column.","Returns matrix with specified columns.","Returns matrix made of one row.","Returns matrix with specified rows.","Creates and returns new Matrix instance with the specified …","","","","","","Returns an identity matrix of the specified size. The …","","","Calls <code>U::from(self)</code>.","","","","","","","","","Return matrix with specified size and elements. ","","","","","","","","","","","","","","","","","","Example","Vectors are approximately equal if the absolute difference …","","","","","","Returns cross product of 3d vector and <code>other</code> 3d vector. If …","Returns number of components in vector.","Returns the Euclidean distance between two vectors. This …","Example","Computes the dot product of this vector with another …","","","Returns the argument unchanged.","","Access vector component.","Example","Example","Calls <code>U::from(self)</code>.","Returns Euclidean magnitude of vector. This method first …","Example","Example","Example","","","Rotates 2d vector counterclockwise on angle expressed in …","Rotates a vector along each of the three axes by the given …","","Returns the square of Eucledean distance between two …","Returns the square of Euclidean magnitude of vector.","Example","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,21,2,3,2,3,2,3,3,2,3,3,2,3,2,2,3,2,2,2,2,2,3,2,3,2,3,2,3,0,0,0,10,14,11,10,14,11,10,11,11,10,10,14,10,14,14,10,14,11,14,11,10,11,11,14,11,10,14,11,14,14,11,14,11,10,14,11,10,14,11,10,14,11,10,10,0,0,22,22,23,22,22,22,22,22,22,0,0,16,24,16,24,16,24,16,24,16,24,16,16,24,16,24,24,16,24,16,24,16,24,16,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[0,0,0,0,0,0,0,0,0,[[],1],[2,1],[3,1],[[]],[[]],[[]],[[]],0,[[2,4],5],[[3,4],5],0,[[]],[[]],[[],2],[[]],[[]],[[2,6,6]],0,[[2,6,7,7,7]],0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,0,0,[[10,11,12]],[[]],[[]],[[]],[[]],[[]],[[]],[11,11],[[]],[10,13],[10,[[13,[12]]]],0,0,0,[14,11],[[],10],0,[[11,11],15],[[]],[[]],[[]],[11],0,[[]],[[]],[[]],[16,14],[[],11],[14,17],0,[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[]],[[]],[[]],[10,10],0,0,[[]],[[]],[6,15],[[]],[[]],[[],8],[[],8],[[],9],[[]],0,0,0,[[]],[[]],[[]],[[]],0,[[],16],0,[[16,16],15],[[]],[[]],0,[[]],[[]],0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[]],[[]],0,[[18,18]],[18,[[19,[18]]]],[[18,18,7],15],[[]],[[]],[18,18],[[]],[18,20],[18,[[19,[7]]]],[[18,7]],[[],18],[[18,18],15],[[18,4],5],[[]],[6,18],[[[13,[6]]],[[19,[18]]]],[6,18],[[[13,[6]]],[[19,[18]]]],[[20,20],18],[[18,20,20],[[19,[7]]]],[[18,20],[[19,[6]]]],[[18,[13,[20]],[13,[20]]],18],[[18,20],[[19,[6]]]],[[[13,[6]]],18],[20,18],[[18,20]],[[18,20]],[[]],[18,[[19,[18]]]],[[18,18]],[[18,7]],[[18,6]],[[18,6]],[[18,18]],[[18,18],[[19,[18]]]],[[18,6],[[19,[6]]]],[[20,20,[13,[7]]],[[19,[18]]]],[7,18],[[7,7,7],18],[18,20],[[18,20,20,7],8],[[18,20,6],8],[[18,20,6],8],[[18,18]],[[18,20,20],8],[[18,20,20],8],[[]],[18,18],[[],8],[[],8],[[],9],[[]],[[20,20],18],0,[[6,6]],[[6,6,7],15],[[]],[[]],[6,6],[[]],0,[[6,6],[[19,[6]]]],[6,20],[[6,6],7],[[6,7]],[[6,6],7],[[6,6],15],[[6,4],5],[[]],[[7,7,7],6],[[6,20],[[19,[7]]]],[[6,20]],[[6,20]],[[]],[6,7],[[6,7]],[[6,7]],[6],[[[13,[7]]],6],[[],6],[[6,7],[[19,[6]]]],[[6,7,7,7],[[19,[6]]]],[[6,20,7],8],[[6,6],7],[6,7],[[6,6]],[[]],[[],8],[[],8],[[],9],[[]],[[],6]],"p":[[8,"Any"],[3,"TransformComponent"],[3,"CameraComponent"],[3,"Formatter"],[6,"Result"],[3,"Vector"],[15,"f32"],[4,"Result"],[3,"TypeId"],[3,"Components"],[3,"Entity"],[3,"Box"],[3,"Vec"],[3,"Game"],[15,"bool"],[3,"CoordinateSystem"],[15,"never"],[3,"Matrix"],[4,"Option"],[15,"usize"],[8,"Component"],[3,"Sphere"],[8,"Body"],[3,"Ray"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
